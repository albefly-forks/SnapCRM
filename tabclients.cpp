#include "global.h"
#include "appver.h"
#include "tabclients.h"
#include "ui_tabclients.h"
#include "mainwindow.h"
#include "com_sql_queries.h"

tabClients* tabClients::p_instance[] = {nullptr,nullptr};

tabClients::tabClients(bool type, MainWindow *parent) :
    tabCommon(parent),
    ui(new Ui::tabClients)
{

    ui->setupUi(this);
    this->setAttribute(Qt::WA_DeleteOnClose);
    m_type = type;
    m_tableUpdateDelay = new QTimer();

    clientsTable = new QSqlQueryModel();
    ui->tableView->setModel(clientsTable);
    if (type == 1)
    {
        ui->buttonPrint->hide();
        ui->buttonClientNew->hide();
        userActivityLog->appendRecord(tr("Navigation –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"));
    }
    else
        userActivityLog->appendRecord(tr("Navigation –ö–ª–∏–µ–Ω—Ç—ã"));

    ui->listViewClientsType->setModel(clientsTypesList);
    ui->listViewClientsType->setModelColumn(0);
    if (userDbData->value("prefer_regular").toBool())
        ui->listViewClientsType->setCurrentIndex(clientsTypesList->index(4, 0));
    else
        ui->listViewClientsType->setCurrentIndex(clientsTypesList->index(0, 0));    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π; –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –≤—ã–ª–µ—Ç–∞—Ç—å –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —É—Å–ª–æ–≤–∏—è –≤ updateTableWidget()

    ui->comboBoxClientAdType->setModel(clientAdTypesList);
    ui->comboBoxClientAdType->setCurrentIndex(-1);
    ui->comboBoxClientAdType->setModelColumn(0);

    QObject::connect(m_tableUpdateDelay, SIGNAL(timeout()), this, SLOT(refreshTable()));
    m_tableUpdateDelay->setSingleShot(true);

    refreshTable();
}

tabClients::~tabClients()
{
    userActivityLog->updateActivityTimestamp();

    p_instance[this->m_type] = nullptr;   // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–ª—è—Ç—å!
    delete ui;
    delete m_tableUpdateDelay;
}

QString tabClients::tabTitle()
{
    if(m_type)
        return tr("–í—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞");
    else
        return tr("–ö–ª–∏–µ–Ω—Ç—ã");
}

tabClients* tabClients::getInstance(bool type, MainWindow *parent)   // singleton: –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–∏—ë–º–∞ –≤ —Ä–µ–º–æ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞
{
    if( !p_instance[type] )
      p_instance[type] = new tabClients(type, parent);
    return p_instance[type];
}

void tabClients::lineEditSearchSetFocus()
{
//    ui->lineEditSearch->setFocusPolicy(Qt::StrongFocus);
    ui->lineEditSearch->setFocus();
}

void tabClients::refreshTable()
{
    ui->tableView->setQuery(QUERY_SEL_CLIENTS_STATIC, QSqlDatabase::database("connMain"));
    FilterList l1;
    l1.op = FilterList::And;

    l1.fields.append(STableViewBase::initFilterField("t1." + clientsTypesList->item(ui->listViewClientsType->currentIndex().row(), 2)->text(), FilterField::NoOp, 1));  // –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    if(!ui->checkBoxShowArchived->isChecked())
        l1.fields.append(STableViewBase::initFilterField("t1.`state`", FilterField::Equals, "1"));
    // TODO: —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π ComboBox —Å –∫–Ω–æ–ø–∫–æ–π üóô
    if (ui->comboBoxClientAdType->currentIndex() >= 0 )
        l1.fields.append(STableViewBase::initFilterField("`visit_source`", FilterField::Equals, clientAdTypesList->index(ui->comboBoxClientAdType->currentIndex(), 1).data().toString()));


    if (ui->lineEditSearch->text().length() > 0)    // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
    {
        FilterList l2;
        l2.op = FilterList::Or;
        QString str = ui->lineEditSearch->text();
        l2.fields.append(STableViewBase::initFilterField("CONCAT_WS(' ', t1.`surname`, t1.`name`, t1.`patronymic`)", FilterField::RegExp, str, Qt::CaseInsensitive));
        l2.fields.append(STableViewBase::initFilterField("t1.`id`", FilterField::Equals, str, Qt::CaseInsensitive));
        l2.fields.append(STableViewBase::initFilterField("t2.`phone`", FilterField::RegExp, str, Qt::CaseInsensitive));
        l2.fields.append(STableViewBase::initFilterField("t2.`phone_clean`", FilterField::RegExp, str, Qt::CaseInsensitive));
        l1.childs.append(l2);
     }

    query_group.clear();
    query_group << "`id`";    // default GROUP part of query

    ui->tableView->setFilter(l1);
    ui->tableView->setGrouping(query_group);
    ui->tableView->refresh();
    ui->labelClientsCounter->setText(QString::number(clientsTable->rowCount()));

    m_tableUpdateDelay->stop();
//    m_tableUpdateDelay->start(10000);
}

void tabClients::clientTypeChanged(QModelIndex)
{
//    qDebug() << "clientTypeChanged(QModelIndex): item1 =" << clientsTypesList->index(index.row(), 0).data() << ", item2 = " << clientsTypesList->index(index.row(), 1).data() << "item3 = " << clientsTypesList->index(index.row(), 2).data();
    refreshTable();
}

void tabClients::clientAdvertisingChanged(int)
{
//    qDebug() << "SLOT clientAdvertisingChanged(int index), index = " << ui->comboBoxClientAdType->currentIndex();
    refreshTable();
}

void tabClients::tableItemDoubleClick(QModelIndex item)
{
    emit doubleClicked(clientsTable->index(item.row(), 0).data().toInt());
    if (m_type == 1)
    {
        emit activateCaller(callerPtr);
        deleteLater();
    }
}

void tabClients::lineEditSearchTextChanged(QString)
{   // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞; –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–∞ —Ç–æ—Ä–º–æ–∑–∏—Ç
//    qDebug() << "SLOT tabClients::lineEditSearchTextChanged(QString search_str), search_str = " << search_str;
    m_tableUpdateDelay->stop();
    m_tableUpdateDelay->start(350);
}

void tabClients::lineEditSearchReturnPressed()
{

}

void tabClients::togglePropertiesPanel()
{

}

