#include "ssaletablemodel.h"

SSaleTableModel::SSaleTableModel(QObject *parent) :
    QStandardItemModel(parent),
    queryData(new QSqlQueryModel)
{
    pendingRemoveList = new QMap<int, int>;
    fields = new QMap<QString, int>;

    QStandardItemModel::setHorizontalHeaderLabels(fieldsDep);
    // TODO: –∑–∞–º–µ–Ω–∏—Ç—å unicode emoji –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Win 7
    setHorizontalHeaderLabels({"üóë","UID","–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ","–ö–æ–ª-–≤–æ","–î–æ—Å—Ç—É–ø–Ω–æ","–¶–µ–Ω–∞","–°—É–º–º–∞","–ú–µ—Å—Ç–æ","–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä","–ì–∞—Ä–∞–Ω—Ç–∏—è"});

    connect(queryData, SIGNAL(modelReset()), this, SLOT(sqlDataChanged()));
#if QT_VERSION >= 0x060000
    connect(this, SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&, const QList<int> &)), this, SLOT(dataChanaged(const QModelIndex&, const QModelIndex&, const QList<int> &)));
#else
    connect(this, SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&, const QVector<int> &)), this, SLOT(dataChanaged(const QModelIndex&, const QModelIndex&, const QVector<int> &)));
#endif
}

SSaleTableModel::~SSaleTableModel()
{
    delete fields;
    delete pendingRemoveList;
    delete queryData;
}

QVariant SSaleTableModel::data(const QModelIndex &index, int role) const
{
    if (role == Qt::DisplayRole)
    {
        switch (index.column()) {
        case ColPrice:
        case ColSumm:
            {
                return sysLocale.toString(QStandardItemModel::data(index, role).toFloat(), 'f', 2);
            }
        case ColBox:
            {
                return itemBoxesModel->getDisplayRole(QStandardItemModel::data(index, role).toInt(), 1);
            }
        case ColWarranty:
            {
                return warrantyTermsModel->getDisplayRole(QStandardItemModel::data(index, role).toInt(), 1);
            }
        }
    }
    if ( role == Qt::BackgroundRole )
    {
        if(value(index.row(), "is_cancellation").toBool())
            return QColor("light gray");
    }

    return QStandardItemModel::data(index, role);
}

Qt::ItemFlags SSaleTableModel::flags(const QModelIndex &index) const
{
    if( m_modelState == State::New || m_modelState == State::Reserved )   // —É –≤–∫–ª–∞–¥–∫–∏ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –ø—Ä–∞–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ (–≤ –ê–°–¶ —Ç–∞–∫–æ–≥–æ –≤—Ä–æ–¥–µ –Ω–µ –±—ã–ª–æ)
    {
        switch (index.column()) {
        case ColCount:
        case ColPrice:
        case ColSN:
        case ColWarranty:
            return Qt::ItemIsEnabled | Qt::ItemIsEditable;
        default:
            return Qt::ItemIsSelectable | Qt::ItemIsEnabled;
        }
    }
    else
    {
        return Qt::ItemIsSelectable | Qt::ItemIsEnabled;
    }
}

bool SSaleTableModel::insertRecord(int row, const QSqlRecord &record)
{
    bool firstRun = 0;
    Q_ASSERT_X(record.count() == columnCount(), "insertRecord()", "different column count");

    if(fields->size() == 0)
        firstRun = 1;

    amountChangedSignalFilter = 0;  // –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–∏–≥–Ω–∞–ª amountChanged –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    if(!QStandardItemModel::insertRow(row))
        return false;

    for(int i = 0; i < record.count(); i++)
    {
        if(firstRun)
        {
            fields->insert(record.fieldName(i), i);
        }

        if(!firstRun && record.fieldName(i) != fields->key(i))
        {
            return false;
        }
        amountChangedSignalFilter = 1;
        setData(index(row, i), record.value(i));

    }
#ifdef QT_DEBUG
    int qtyLimit;
    if(record.value(fields->value("avail")).toInt() > 5)
        qtyLimit = 5;
    else
        qtyLimit = record.value(fields->value("avail")).toInt() + 1;

    int rand = QRandomGenerator::global()->bounded(qtyLimit);
    setData(index(row, ColCount), rand?rand:1);
#endif

    return true;
}

bool SSaleTableModel::appendRecord(const QSqlRecord &record)
{
    return insertRecord(rowCount(), record);
}

/* –ü–æ–º–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
 * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å, –≤ –º–∞—Å—Å–∏–≤ –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º - —É–¥–∞–ª—è—Ç—Å—è (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è).
 * –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –†–ù —Ä–µ–∑–µ—Ä–≤–∞, –∑–∞–ø–∏—Å–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ id –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ is_cancellation.
 * row  - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
 * db_id - id –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ store_sales
 */
bool SSaleTableModel::removeRowHandler(int row, int db_id)
{
    if(pendingRemoveList->contains(row))
    {
        pendingRemoveList->remove(row);
        setData(index(row, ColIsCancellation), 0);
//        setData(index(row, ColIsCancellation), 0, Changed);
        setData(index(row, ColCount), value(row, "count", QtyBackup).toInt());   // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ UserRole
    }
    else
    {
        pendingRemoveList->insert(row, db_id);
        setData(index(row, ColIsCancellation), 1);
//        setData(index(row, ColIsCancellation), 1, Changed);
        setData(index(row, ColCount), value(row, "count"), QtyBackup); // –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –≤ UserRole —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ; —ç—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è —Å—Ç—Ä–æ–∫–æ–π –∏ —Ç—É—Ç –∂–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑
        setData(index(row, ColCount), 0);   // –∫–æ–ª-–≤–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    }
    emit modelReset();

    return 0;
}

QMap<int, int>* SSaleTableModel::getPendingRemoveList()
{
    return pendingRemoveList;
}

int SSaleTableModel::pendingRemoveItemsCount()
{
    if(pendingRemoveList->isEmpty())
        return rowCount();

    return pendingRemoveList->size();
}

/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
 * –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É, –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ü–µ–Ω
 */
void SSaleTableModel::setPriceColumn(QSqlQuery *query)
{
    QString qry = query->lastQuery();   // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    int  item_id;
    item_id = fields->value("item_id");

    Q_ASSERT_X(qry.contains(":id", Qt::CaseSensitive), "SSaleTableModel::setPriceColumn(QSqlQuery *)", "–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –∑–∞–¥–∞–Ω (–∏–ª–∏ –∑–∞–¥–∞–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π) placeholder");
    for(int i = 0; i < rowCount(); i++)
    {
        query->bindValue(":id", index(i,  item_id).data().toInt());
        query->exec();
        query->first();
        setData(index(i,  ColPrice), query->record().value(0).toFloat());
    }
}

/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
*/
bool SSaleTableModel::load(int doc_id)
{
    documentId = doc_id;
    if(m_modelState == State::Payed)
        queryData->setQuery(QUERY_SEL_ITEMS_IN_DOC(documentId), QSqlDatabase::database("connMain"));
    else if( m_modelState == State::Reserved || m_modelState == State::Cancelled )
        queryData->setQuery(QUERY_SEL_ITEMS_IN_DOC_RSRV(documentId), QSqlDatabase::database("connMain"));
    else
        return 1;

    return 0;
}

void SSaleTableModel::setClient(int id)
{
//    values.insert("client", QString::number(id));
    m_client = id;
}

void SSaleTableModel::unsetClient()
{
//    values.insert("client", "NULL");
    m_client = 0;
}

void SSaleTableModel::setDocumentId(int id)
{
//    values.insert("document_id", QString::number(id));
    documentId = id;
}

/*  –ü—Ä–æ–¥–∞–∂–∞ (–≤ —Ç. —á. —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) –∏ —Ä–µ–∑–µ—Ä–≤ —Ç–æ–≤–∞—Ä–æ–≤.
 *  –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∂–µ—Ç—Å—è –æ—Ç —á–∞—Å—Ç–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫–∏)
 *  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
bool SSaleTableModel::saleItems(SaleOpType type)
{
    bool ret = 1;

    if(!pendingRemoveList->isEmpty())
        ret = backOutItems(FreeReserved);

    m_itemsAffected = 0;
    for(int i = 0; i < rowCount() && ret && nIntegrityErr; i++)
    {
        if(index(i, ColIsCancellation).data().toBool())  // —á–∞—Å—Ç–∏—á–Ω–æ —Å–Ω—è—Ç—ã–µ —Å —Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue;

        m_itemsAffected++;
        SSaleItemModel *itm = item(i);
        itm->setClient(m_client);
        itm->setDocumentId(documentId);
        itm->setMode(SSaleItemModel::RegularSales);
        if(type == Sale)
            ret = itm->sale();
        else
            ret = itm->reserve();

        nIntegrityErr = itm->integrityStatus();

        delete itm;
    }

    if(!ret)
        throw 1;

    if(!nIntegrityErr)
        throw 2;

    return ret;
}

bool SSaleTableModel::reserveItems()
{
    return saleItems(Reserve);
}

/* –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞
 * –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–º–µ—Ç–∏–ª –æ—Ç–¥–µ–ª—å–Ω—ã–µ c—Ç—Ä–æ–∫–∏)
 * –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–π. –¢–∞–∫–∂–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç.
 */
bool SSaleTableModel::unsaleItems()
{
    bool ret = 1;

    if(pendingRemoveList->isEmpty())
    {
        markAllItemsToRemove(Unsale);
    }
    ret = backOutItems(Unsale);

    return ret;
}

bool SSaleTableModel::unsaleItems(const QString &reason)
{
    setUnsaleReason(reason);
    unsaleItems();
}

void SSaleTableModel::setUnsaleReason(const QString &reason)
{
    m_unsaleReason = reason;
}

/* –ü–æ–ª–Ω–æ–µ —Å–Ω—è—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–∞
 * –ü–æ–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
 */
bool SSaleTableModel::freeItems()
{
    bool ret = 1;

    pendingRemoveList->clear();
    markAllItemsToRemove(FreeReserved);
    ret = backOutItems(FreeReserved);

    return ret;
}

/*  –í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç/—Å–Ω—è—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–∞
 */
bool SSaleTableModel::backOutItems(BackOutOpType type)
{
    bool ret = 1;
    m_itemsAffected = 0;

    QMap<int, int>::const_iterator i;
    for (i = pendingRemoveList->constBegin(); i != pendingRemoveList->constEnd() && ret && nIntegrityErr; ++i)
    {
        m_itemsAffected++;
        SSaleItemModel *itm = item(i.key());
        itm->setMode(SSaleItemModel::RegularSales);
        if(type == Unsale)
        {
            itm->setUnsaleReason(m_unsaleReason);
            ret = itm->unsale();
        }
        else
            ret = itm->free();

        nIntegrityErr = itm->integrityStatus();

        delete itm;
    }

    if(ret && nIntegrityErr)
        pendingRemoveList->clear();
    else
        m_itemsAffected = 0;

    if(!ret)
        throw 1;

    if(!nIntegrityErr)
        throw 2;

    return ret;
}

int SSaleTableModel::itemsAffected()
{
    return m_itemsAffected;
}

/*  –ü–æ–º–µ—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
 */
void SSaleTableModel::markAllItemsToRemove(BackOutOpType type)
{
    for(int i = 0; i < rowCount(); i++)
    {
        if(type == Unsale)
            if(index(i, ColIsCancellation).data().toBool())  // –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue;

        removeRowHandler(i, index(i, ColId).data().toInt());
    }
}

SSaleItemModel *SSaleTableModel::item(const int rownum)
{
    SSaleItemModel *item = new SSaleItemModel(row(rownum), parent());
    return item;
}

bool SSaleTableModel::integrityStatus()
{
    return  nIntegrityErr;
}

QList<QStandardItem *> SSaleTableModel::row(int row)
{
    QList<QStandardItem *> rowItems;
    for(int column = 0; column < columnCount(); column++)
    {
        // TODO: —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –∑–Ω–∞—á–µ–Ω–∏–π: –¥–ª—è –Ω–µ –Ω–æ–≤–æ–π –†–ù –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//        if(m_modelState == State::New)
            rowItems << QStandardItemModel::item(row, column);
//        else
//        {
//            if(QStandardItemModel::item(row, column)->data(Changed).toBool())
//                rowItems << QStandardItemModel::item(row, column);
//        }
    }

    return rowItems;
}

/* —Ç. –∫. –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É —Å—Ç–æ–ª–±—Ü–∞, –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
 * –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å–ø–∏—Å–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * TODO: –≤–æ–æ–±—â–µ, –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, –Ω–æ —ç—Ç–æ –ø–æ—Ç–æ–º...
 */
void SSaleTableModel::setHorizontalHeaderLabels(const QStringList &labels)
{

    for(int i = 0; i < labels.count(); i++)
    {
        Q_ASSERT_X(horizontalHeaderItem(i)->text() == fieldsDep.at(i), "SSaleTableModel::setHorizontalHeaderLabels()", "fields dependencies");
    }
    QStandardItemModel::setHorizontalHeaderLabels(labels);
}

/* –°—É–º–º–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
 *
 */
double SSaleTableModel::totalAmount()
{
    double amount = 0;
    int isCancellationCol = fields->value("is_cancellation");
    for(int i = 0; i < rowCount(); i++)
    {
        amount += value(i, ColSumm).toFloat() * !value(i, isCancellationCol).toBool();
    }
    return amount;
}

QString SSaleTableModel::totalAmountLocal()
{
    return sysLocale.toString(totalAmount(), 'f', 2);
}

QVariant SSaleTableModel::value(int row, int column) const
{
    return QStandardItemModel::data(index(row, column));
}

QVariant SSaleTableModel::value(int row, QString field) const
{
    return QStandardItemModel::data(index(row, fields->value(field)));
}

QVariant SSaleTableModel::value(int row, QString field, int role) const
{
    return QStandardItemModel::data(index(row, fields->value(field)), role);
}

/* –í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QSqlQueryModel –≤ QStandardItemModel
 * –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ this->setQuery()
 *
 */
void SSaleTableModel::sqlDataChanged()
{
    setRowCount(queryData->rowCount());
    setColumnCount(queryData->columnCount());
    pendingRemoveList->clear();
    fields->clear();
    for(int j = 0; j < queryData->columnCount(); j++)
    {
        fields->insert(queryData->headerData(j, Qt::Horizontal).toString(), j);
//        QStandardItemModel::setHeaderData(j, Qt::Horizontal, queryData->headerData(j, Qt::Horizontal));
    }
    for(int i = 0; i < queryData->rowCount(); i++)
    {
        for(int j = 0; j < queryData->columnCount(); j++)
        {
//            QStandardItemModel::setHeaderData(j, Qt::Horizontal, queryData->headerData(j, Qt::Horizontal));
            QStandardItemModel::setData(index(i, j), queryData->index(i, j).data());
        }
        // –í UserRole –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_cancellation (—á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ª–µ–∑—Ç—å –≤ –¥—Ä—É–≥–∏–µ –∏–Ω–¥–µ–∫—Å—ã –æ–±—ä–µ–∫—Ç–∞);
        // –æ–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏: —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø—Ä–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º
        // –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø—Ä–∏–¥—ë—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –≤ –Ω–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.
        QStandardItemModel::setData(index(i, 0), queryData->index(i, fields->value("is_cancellation")).data(), Qt::UserRole);
    }
    queryData->blockSignals(true);
    queryData->clear();
    queryData->blockSignals(false);
    emit modelReset();
}

#if QT_VERSION >= 0x060000
void SSaleTableModel::dataChanaged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QList<int> &roles)
#else
void SSaleTableModel::dataChanaged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles)
#endif
{
    int row = topLeft.row();
    int column = topLeft.column();
    if( (column == ColCount || column == ColPrice) /*&& amountChangedSignalFilter*/ )   // –±—ã–ª –≥–ª—é–∫, —á—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ–±—â–∞—è —Å—É–º–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    {
        setData(index(row, ColSumm), value(row, ColCount).toInt() * value(row, ColPrice).toFloat() );
        emit amountChanged(totalAmount());
    }
}

bool SSaleTableModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (role == Qt::EditRole) {
        if (!checkIndex(index))
            return false;

        // –µ—Å–ª–∏ —è—á–µ–π–∫–∏ "–ö–æ–ª-–≤–æ" –∏ "–î–æ—Å—Ç—É–ø–Ω–æ" —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã –æ—à–∏–±–æ—á–Ω—ã–º–∏, —Ç–æ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
        if( index.column() == ColCount)
        {
            if(index.data(Qt::BackgroundRole) == QColor(255,209,209) )
            {
                QStandardItemModel::setData(index, QVariant(), Qt::BackgroundRole);
                QStandardItemModel::setData(this->index(index.row(), fields->value("avail")), QVariant(), Qt::BackgroundRole);
            }
        }

        // —Ç–æ –∂–µ –¥–ª—è —è—á–µ–∫–π–∫–∏ "–¶–µ–Ω–∞"
        if( index.column() == ColPrice)
        {
            if(index.data(Qt::BackgroundRole) == QColor(255,209,209) )
            {
                QStandardItemModel::setData(index, QVariant(), Qt::BackgroundRole);
            }
        }

        return QStandardItemModel::setData(index, value);
    }
    else
    {
        return QStandardItemModel::setData(index, value, role);
    }
    return false;
}

void SSaleTableModel::setQuery(const QString &query, const QSqlDatabase &db)
{
    queryData->setQuery(query, db);
}
