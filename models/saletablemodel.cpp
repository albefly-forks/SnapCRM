#include "saletablemodel.h"

SaleTableModel::SaleTableModel(QObject *parent) :
    QStandardItemModel(parent),
    queryData(new QSqlQueryModel)
{
    pendingRemoveList = new QMap<int, int>;
    fields = new QMap<QString, int>;

    QStandardItemModel::setHorizontalHeaderLabels(fieldsDep);
    // TODO: –∑–∞–º–µ–Ω–∏—Ç—å unicode emoji –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Win 7
    setHorizontalHeaderLabels({"üóë","UID","–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ","–ö–æ–ª-–≤–æ","–î–æ—Å—Ç—É–ø–Ω–æ","–¶–µ–Ω–∞","–°—É–º–º–∞","–ú–µ—Å—Ç–æ","–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä","–ì–∞—Ä–∞–Ω—Ç–∏—è"});

    connect(queryData, SIGNAL(modelReset()), this, SLOT(sqlDataChanged()));
#if QT_VERSION >= 0x060000
    connect(this, SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&, const QList<int> &)), this, SLOT(dataChanaged(const QModelIndex&, const QModelIndex&, const QList<int> &)));
#else
    connect(this, SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&, const QVector<int> &)), this, SLOT(dataChanaged(const QModelIndex&, const QModelIndex&, const QVector<int> &)));
#endif
}

SaleTableModel::~SaleTableModel()
{
    delete fields;
    delete pendingRemoveList;
}

QVariant SaleTableModel::data(const QModelIndex &index, int role) const
{
    if (role == Qt::DisplayRole)
    {
        switch (index.column()) {
        case 5:
        case 6:
            {
                return sysLocale.toString(QStandardItemModel::data(index, role).toFloat(), 'f', 2);
            }
        case 7:
            {
                return itemBoxesModel->getDisplayRole(QStandardItemModel::data(index, role).toInt(), 1);
            }
        case 9:
            {
                return warrantyTermsModel->getDisplayRole(QStandardItemModel::data(index, role).toInt(), 1);
            }
        }
    }
    if ( role == Qt::BackgroundRole )
    {
        if(value(index.row(), "is_cancellation").toBool())
            return QColor("light gray");
    }

    return QStandardItemModel::data(index, role);
}

Qt::ItemFlags SaleTableModel::flags(const QModelIndex &index) const
{
    if( modelState == 0 || modelState == 2 )   // —É –≤–∫–ª–∞–¥–∫–∏ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤‚Ä≤: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –†–ù, –ø—Ä–∞–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ (–≤ –ê–°–¶ —Ç–∞–∫–æ–≥–æ –≤—Ä–æ–¥–µ –Ω–µ –±—ã–ª–æ) –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π
    {
        switch (index.column()) {
        case 3:
        case 5:
        case 8:
        case 9:
            return Qt::ItemIsEnabled | Qt::ItemIsEditable;
        default:
            return Qt::ItemIsSelectable | Qt::ItemIsEnabled;
        }
    }
    else
    {
        return Qt::ItemIsSelectable | Qt::ItemIsEnabled;
    }
}

bool SaleTableModel::insertRecord(int row, const QSqlRecord &record)
{
//    qDebug() << "SaleTableModel::insertRecord";
    bool firstRun = 0;
    Q_ASSERT_X(record.count() == columnCount(), "insertRecord()", "different column count");

    if(fields->size() == 0)
        firstRun = 1;

    amountChangedSignalFilter = 0;  // –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–∏–≥–Ω–∞–ª amountChanged –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    if(!QStandardItemModel::insertRow(row))
        return false;

    for(int i = 0; i < record.count(); i++)
    {
        if(firstRun)
        {
            fields->insert(record.fieldName(i), i);
            if(record.fieldName(i) == "count")
                countCol = i;
            if(record.fieldName(i) == "price")
                priceCol = i;
            if(record.fieldName(i) == "summ")
                summCol = i;
        }

        if(!firstRun && record.fieldName(i) != fields->key(i))
        {
            qDebug() << "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: record.fieldName(i) =" << record.fieldName(i) << "; fields->key(i) =" << fields->key(i);
            return false;
        }
        amountChangedSignalFilter = 1;
        setData(index(row, i), record.value(i));

    }
#ifdef QT_DEBUG
    int rand = QRandomGenerator::global()->bounded(record.value(fields->value("avail")).toInt() + 1);
    setData(index(row, countCol), rand?rand:1);
#endif

    return true;
}

bool SaleTableModel::appendRecord(const QSqlRecord &record)
{
    return insertRecord(rowCount(), record);
}

/* –ü–æ–º–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
 * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å, –≤ –º–∞—Å—Å–∏–≤ –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º - —É–¥–∞–ª—è—Ç—Å—è (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è).
 * –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –†–ù —Ä–µ–∑–µ—Ä–≤–∞, –∑–∞–ø–∏—Å–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ id –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ is_cancellation.
 * row  - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
 * db_id - id –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ store_sales
 */
bool SaleTableModel::removeRowHandler(int row, int db_id)
{
    if(pendingRemoveList->contains(row))
    {
        pendingRemoveList->remove(row);
        setData(index(row, fields->value("is_cancellation")), 0);
        setData(index(row, fields->value("count")), value(row, "count", Qt::UserRole).toInt());   // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ UserRole
    }
    else
    {
        pendingRemoveList->insert(row, db_id);
        setData(index(row, fields->value("is_cancellation")), 1);
        setData(index(row, fields->value("count")), value(row, "count"), Qt::UserRole); // –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –≤ UserRole —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ; —ç—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è —Å—Ç—Ä–æ–∫–æ–π –∏ —Ç—É—Ç –∂–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑
        setData(index(row, fields->value("count")), 0);   // –∫–æ–ª-–≤–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    }
    emit modelReset();

    return 0;
}

QMap<int, int>* SaleTableModel::getPendingRemoveList()
{
    return pendingRemoveList;
}

bool SaleTableModel::revertMode()
{
    if(pendingRemoveList->size() == 0)    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–º–µ—á–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, —Ç–æ —Ä–∞—Å–ø—Ä–æ–≤–æ–¥–∏–º –≤—Å—é –Ω–∞–∫–ª–∞–¥–Ω—É—é
    {
        return 1;
    }
    else
        return 0;
}

/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
 * –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É, –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ü–µ–Ω
 */
void SaleTableModel::setPriceColumn(QSqlQuery *query)
{
//    qDebug() << "SaleTableModel::setPriceColumn()";
    QString qry = query->lastQuery();   // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    int  item_id;
    item_id = fields->value("item_id");

    Q_ASSERT_X(qry.contains(":id", Qt::CaseSensitive), "SaleTableModel::setPriceColumn(QSqlQuery *)", "–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –∑–∞–¥–∞–Ω (–∏–ª–∏ –∑–∞–¥–∞–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π) placeholder");
    for(int i = 0; i < rowCount(); i++)
    {
        query->bindValue(":id", index(i,  item_id).data().toInt());
        query->exec();
        query->first();
        setData(index(i,  priceCol), query->record().value(0).toFloat());
    }
}

/* —Ç. –∫. –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É —Å—Ç–æ–ª–±—Ü–∞, –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
 * –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å–ø–∏—Å–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * TODO: –≤–æ–æ–±—â–µ, –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, –Ω–æ —ç—Ç–æ –ø–æ—Ç–æ–º...
 */
void SaleTableModel::setHorizontalHeaderLabels(const QStringList &labels)
{

    for(int i = 0; i < labels.count(); i++)
    {
        Q_ASSERT_X(horizontalHeaderItem(i)->text() == fieldsDep.at(i), "SaleTableModel::setHorizontalHeaderLabels()", "fields dependencies");
    }
    QStandardItemModel::setHorizontalHeaderLabels(labels);
}

/* –°—É–º–º–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
 *
 */
double SaleTableModel::totalAmount()
{
    double amount = 0;
    int isCancellationCol = fields->value("is_cancellation");
    for(int i = 0; i < rowCount(); i++)
    {
        amount += value(i, summCol).toFloat() * !value(i, isCancellationCol).toBool();
    }
    return amount;
}

QVariant SaleTableModel::value(int row, int column) const
{
    return QStandardItemModel::data(index(row, column));
}

QVariant SaleTableModel::value(int row, QString field) const
{
    return QStandardItemModel::data(index(row, fields->value(field)));
}

QVariant SaleTableModel::value(int row, QString field, int role) const
{
    return QStandardItemModel::data(index(row, fields->value(field)), role);
}

/* –í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QSqlQueryModel –≤ QStandardItemModel
 * –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ this->setQuery()
 *
 */
void SaleTableModel::sqlDataChanged()
{
//    qDebug() << "SaleTableModel::sqlDataChanged()";
    setRowCount(queryData->rowCount());
    setColumnCount(queryData->columnCount());
    pendingRemoveList->clear();
    fields->clear();
    for(int j = 0; j < queryData->columnCount(); j++)
    {
        fields->insert(queryData->headerData(j, Qt::Horizontal).toString(), j);
//        QStandardItemModel::setHeaderData(j, Qt::Horizontal, queryData->headerData(j, Qt::Horizontal));
    }
    for(int i = 0; i < queryData->rowCount(); i++)
    {
        for(int j = 0; j < queryData->columnCount(); j++)
        {
//            QStandardItemModel::setHeaderData(j, Qt::Horizontal, queryData->headerData(j, Qt::Horizontal));
            QStandardItemModel::setData(index(i, j), queryData->index(i, j).data());
        }
        // –í UserRole –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_cancellation (—á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ª–µ–∑—Ç—å –≤ –¥—Ä—É–≥–∏–µ –∏–Ω–¥–µ–∫—Å—ã –æ–±—ä–µ–∫—Ç–∞);
        // –æ–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏: —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø—Ä–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º
        // –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø—Ä–∏–¥—ë—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –≤ –Ω–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.
        QStandardItemModel::setData(index(i, 0), queryData->index(i, fields->value("is_cancellation")).data(), Qt::UserRole);
    }
    queryData->blockSignals(true);
    queryData->clear();
    queryData->blockSignals(false);
    emit modelReset();
}

#if QT_VERSION >= 0x060000
void SaleTableModel::dataChanaged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QList<int> &roles)
#else
void SaleTableModel::dataChanaged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles)
#endif
{
    int row = topLeft.row();
    int column = topLeft.column();
    if( (column == countCol || column == priceCol) && amountChangedSignalFilter )   // –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ–±—â–∞—è —Å—É–º–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    {
        setData(index(row, summCol), value(row, countCol).toInt() * value(row, priceCol).toFloat() );
        emit amountChanged(totalAmount());
    }
}

bool SaleTableModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (role == Qt::EditRole) {
        if (!checkIndex(index))
            return false;

        // –µ—Å–ª–∏ —è—á–µ–π–∫–∏ "–ö–æ–ª-–≤–æ" –∏ "–î–æ—Å—Ç—É–ø–Ω–æ" —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã –æ—à–∏–±–æ—á–Ω—ã–º–∏, —Ç–æ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
        if( index.column() == countCol)
        {
            if(index.data(Qt::BackgroundRole) == QColor(255,209,209) )
            {
                QStandardItemModel::setData(index, QVariant(), Qt::BackgroundRole);
                QStandardItemModel::setData(this->index(index.row(), fields->value("avail")), QVariant(), Qt::BackgroundRole);
            }
        }

        // —Ç–æ –∂–µ –¥–ª—è —è—á–µ–∫–π–∫–∏ "–¶–µ–Ω–∞"
        if( index.column() == priceCol)
        {
            if(index.data(Qt::BackgroundRole) == QColor(255,209,209) )
            {
                QStandardItemModel::setData(index, QVariant(), Qt::BackgroundRole);
            }
        }

        return QStandardItemModel::setData(index, value);
    }
    else
    {
        return QStandardItemModel::setData(index, value, role);
    }
    return false;
}

void SaleTableModel::setQuery(const QString &query, const QSqlDatabase &db)
{
    queryData->setQuery(query, db);
}
